/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as UploadIndexImport } from './routes/upload/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as NewpatientIndexImport } from './routes/newpatient/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as UploadUploadidImport } from './routes/upload/$uploadid'
import { Route as NewpatientResultIdImport } from './routes/newpatient/result/$id'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UploadIndexRoute = UploadIndexImport.update({
  path: '/upload/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any)

const NewpatientIndexRoute = NewpatientIndexImport.update({
  path: '/newpatient/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const UploadUploadidRoute = UploadUploadidImport.update({
  path: '/upload/$uploadid',
  getParentRoute: () => rootRoute,
} as any)

const NewpatientResultIdRoute = NewpatientResultIdImport.update({
  path: '/newpatient/result/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/upload/$uploadid': {
      id: '/upload/$uploadid'
      path: '/upload/$uploadid'
      fullPath: '/upload/$uploadid'
      preLoaderRoute: typeof UploadUploadidImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/newpatient/': {
      id: '/newpatient/'
      path: '/newpatient'
      fullPath: '/newpatient'
      preLoaderRoute: typeof NewpatientIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/upload/': {
      id: '/upload/'
      path: '/upload'
      fullPath: '/upload'
      preLoaderRoute: typeof UploadIndexImport
      parentRoute: typeof rootRoute
    }
    '/newpatient/result/$id': {
      id: '/newpatient/result/$id'
      path: '/newpatient/result/$id'
      fullPath: '/newpatient/result/$id'
      preLoaderRoute: typeof NewpatientResultIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  UploadUploadidRoute,
  LoginIndexRoute,
  NewpatientIndexRoute,
  SettingsIndexRoute,
  UploadIndexRoute,
  NewpatientResultIdRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/upload/$uploadid",
        "/login/",
        "/newpatient/",
        "/settings/",
        "/upload/",
        "/newpatient/result/$id"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/upload/$uploadid": {
      "filePath": "upload/$uploadid.jsx"
    },
    "/login/": {
      "filePath": "login/index.jsx"
    },
    "/newpatient/": {
      "filePath": "newpatient/index.jsx"
    },
    "/settings/": {
      "filePath": "settings/index.jsx"
    },
    "/upload/": {
      "filePath": "upload/index.jsx"
    },
    "/newpatient/result/$id": {
      "filePath": "newpatient/result/$id.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
